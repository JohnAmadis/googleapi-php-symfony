<?php

/**
 * GeocodeController
 * PHP version 5
 *
 * @category Class
 * @package  GoogleApi\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Google GeoCode API
 *
 * API for handling of the geocode
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoogleApi\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use GoogleApi\Server\Api\GeocodeApiInterface;
use GoogleApi\Server\Model\InlineResponse200;

/**
 * GeocodeController Class Doc Comment
 *
 * @category Class
 * @package  GoogleApi\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeocodeController extends Controller
{

    /**
     * Operation getInformation
     *
     * Gets Geo-Information about the specified place
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getInformationAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        $matches = [];
        $authenticationHeader = $request->headers->get('authorization');


        // Read out all input parameter values into variables
        $address = $request->query->get('address');
        $latlng = $request->query->get('latlng');
        $language = $request->query->get('language');
        $key = $request->query->get('key');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $address = $this->deserialize($address, 'string', 'string');
        } catch( Exception $e ) {
            $address = null;
        }
        try {
            $latlng = $this->deserialize($latlng, 'string', 'string');
        } catch( Exception $e ) {
            $latlng = null;
        }
        try {
            $language = $this->deserialize($language, 'string', 'string');
        } catch( Exception $e ) {
            $language = null;
        }
        try {
            $key = $this->deserialize($key, 'string', 'string');
        } catch( Exception $e ) {
            $key = null;
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($address, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($latlng, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($language, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($key, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Make the call to the business logic
            $defaultResponseCode = 200;
            $responseCode = $defaultResponseCode;
            $redirectUrl = null;
            $result = null;
            $authenticated = false;
            
            $handler->clearAuthenticationMethodRequirements();
            
            
            $authenticated = true;
            
            $responseHeaders = [];
            if ( $authenticated ) {
                $result = $handler->getInformation($address, $latlng, $language, $key, $responseCode, $responseHeaders);
            } else {
                if ( $redirectUrl ) {
                    $responseHeaders['Location'] = $redirectUrl;
                }
                if ( $responseCode == $defaultResponseCode ) {
                    $responseCode = 401;
                }
            }
            // Find default response message
            $message = 'search results matching criteria';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'search results matching criteria';
                    break;
            }
            
            $content = '';
            if ( $result && $result instanceof UploadedFile )
            {
                $path = $result->getPath() . '/' . $result->getFilename();
                if ( file_exists($path) )
                {
                    $content = file_get_contents($path);
                    $contentType = mime_content_type($path);
                    $responseFormat = $this->getOutputFormat($clientAccepts, [$contentType]);
                    if ( $responseFormat === null ) {
                        return Response( '', 406 );
                    }
                    $responseHeaders["Content-Length"] = filesize($path);
                }
            }
            elseif ( $responseFormat == 'application/json' || $responseFormat == 'application/xml' )
            {
                $content = $result?$this->serialize($result, $responseFormat):'';
            }

            return new Response(
                $content,
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-Swagger-Message' => $message, 
                        'Api-Version' => '1.0.1', 
                        'Api-Build-Date' => '2020-12-15T23:28:51.827+01:00'
                    ], 
                    $handler->getDefaultHeaders()
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return GeocodeApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('geocode');
    }
}
